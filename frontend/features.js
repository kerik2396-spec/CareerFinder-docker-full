// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è CareerFinder
class CareerFeatures {
    constructor() {
        this.notifications = JSON.parse(localStorage.getItem('careerFinderNotifications')) || [];
        this.init();
    }

    init() {
        this.loadFeaturedVacancies();
        this.setupSearchSuggestions();
        this.updateNotificationCount();
        this.loadUserProfile();
        this.initChatBot();
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π
    loadFeaturedVacancies() {
        const featuredVacancies = [
            {
                title: "Senior Frontend Developer (React)",
                company: "TechCorp",
                location: "–ú–æ—Å–∫–≤–∞",
                type: "–ü–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å",
                salary: "–æ—Ç 200 000 ‚ÇΩ",
                description: "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–∞ React. –£–¥–∞–ª—ë–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –≤–æ–∑–º–æ–∂–Ω–∞.",
                tags: ["React", "TypeScript", "Redux"],
                featured: true,
                urgent: true
            },
            {
                title: "Data Scientist",
                company: "AIAnalytics",
                location: "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
                type: "–ü–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å",
                salary: "–æ—Ç 250 000 ‚ÇΩ",
                description: "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ ML –º–æ–¥–µ–ª–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö.",
                tags: ["Python", "ML", "SQL", "TensorFlow"],
                featured: true,
                urgent: false
            },
            {
                title: "Product Manager",
                company: "StartupLab",
                location: "–£–¥–∞–ª—ë–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞",
                type: "–ü–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å",
                salary: "–æ—Ç 180 000 ‚ÇΩ",
                description: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–º –æ—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –¥–æ –∑–∞–ø—É—Å–∫–∞.",
                tags: ["Product", "Analytics", "Agile"],
                featured: true,
                urgent: true
            }
        ];

        const container = document.getElementById('featuredVacancies');
        if (container) {
            container.innerHTML = featuredVacancies.map(vacancy => `
                <div class="vacancy-card ${vacancy.featured ? 'featured' : ''} ${vacancy.urgent ? 'urgent' : ''}">
                    ${vacancy.urgent ? '<div class="urgent-badge">–°—Ä–æ—á–Ω–æ</div>' : ''}
                    <h3>${vacancy.title}</h3>
                    <div class="meta">${vacancy.company} ‚Ä¢ ${vacancy.location} ‚Ä¢ ${vacancy.type}</div>
                    <div class="salary">${vacancy.salary}</div>
                    <p>${vacancy.description}</p>
                    <div class="vacancy-tags">
                        ${vacancy.tags.map(tag => `<span class="tag">${tag}</span>`).join('')}
                    </div>
                    <div class="vacancy-actions">
                        <button class="btn" onclick="addToFavorites(this)">ü§ç –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ</button>
                        <button class="btn primary" onclick="openModal('applyModal')">–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è</button>
                    </div>
                </div>
            `).join('');
        }
    }

    // –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ–∏—Å–∫–∞
    setupSearchSuggestions() {
        const searchInput = document.getElementById('searchInput');
        const suggestions = document.getElementById('searchSuggestions');
        
        if (!searchInput || !suggestions) return;

        const popularSearches = [
            "Frontend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
            "Backend developer",
            "UX/UI –¥–∏–∑–∞–π–Ω–µ—Ä",
            "Data Scientist",
            "Product Manager",
            "DevOps engineer",
            "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ –º–µ–Ω–µ–¥–∂–µ—Ä",
            "–ê–Ω–∞–ª–∏—Ç–∏–∫ –¥–∞–Ω–Ω—ã—Ö"
        ];

        searchInput.addEventListener('input', (e) => {
            const value = e.target.value.toLowerCase();
            suggestions.innerHTML = '';

            if (value.length > 1) {
                const filtered = popularSearches.filter(search => 
                    search.toLowerCase().includes(value)
                );

                if (filtered.length > 0) {
                    suggestions.classList.add('show');
                    filtered.forEach(search => {
                        const div = document.createElement('div');
                        div.className = 'suggestion-item';
                        div.textContent = search;
                        div.onclick = () => {
                            searchInput.value = search;
                            suggestions.classList.remove('show');
                            searchJobs();
                        };
                        suggestions.appendChild(div);
                    });
                } else {
                    suggestions.classList.remove('show');
                }
            } else {
                suggestions.classList.remove('show');
            }
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ
        document.addEventListener('click', (e) => {
            if (!searchInput.contains(e.target) && !suggestions.contains(e.target)) {
                suggestions.classList.remove('show');
            }
        });
    }

    // –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    searchByCategory(category) {
        const searchInput = document.getElementById('searchInput');
        if (searchInput) {
            searchInput.value = category;
            searchJobs();
        }
    }

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
    addNotification(title, message, type = 'info') {
        const notification = {
            id: Date.now(),
            title,
            message,
            type,
            date: new Date().toLocaleString(),
            read: false
        };

        this.notifications.unshift(notification);
        this.saveNotifications();
        this.updateNotificationCount();
        this.showNotification(notification);
    }

    showNotification(notification) {
        if (document.hidden) return; // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–∫–ª–∞–¥–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞

        const toast = document.getElementById('toast');
        if (toast) {
            toast.textContent = `${notification.title}: ${notification.message}`;
            toast.className = `toast ${notification.type}`;
            toast.classList.add('show');
            
            setTimeout(() => {
                toast.classList.remove('show');
            }, 4000);
        }
    }

    updateNotificationCount() {
        const countElement = document.getElementById('notificationCount');
        const unreadCount = this.notifications.filter(n => !n.read).length;
        
        if (countElement) {
            countElement.textContent = unreadCount;
            countElement.style.display = unreadCount > 0 ? 'flex' : 'none';
        }
    }

    saveNotifications() {
        localStorage.setItem('careerFinderNotifications', JSON.stringify(this.notifications));
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    loadUserProfile() {
        const savedUser = localStorage.getItem('careerFinderCurrentUser');
        if (savedUser) {
            const user = JSON.parse(savedUser);
            this.updateAvatar(user);
        }
    }

    updateAvatar(user) {
        const avatarImg = document.getElementById('avatarImg');
        const avatarPlaceholder = document.getElementById('avatarPlaceholder');
        const profileAvatarImg = document.getElementById('profileAvatarImg');
        const profileAvatarPlaceholder = document.getElementById('profileAvatarPlaceholder');

        if (user.avatar) {
            if (avatarImg) {
                avatarImg.src = user.avatar;
                avatarImg.style.display = 'block';
                avatarPlaceholder.style.display = 'none';
            }
            if (profileAvatarImg) {
                profileAvatarImg.src = user.avatar;
                profileAvatarImg.style.display = 'block';
                profileAvatarPlaceholder.style.display = 'none';
            }
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞
    handleAvatarUpload(input) {
        const file = input.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = (e) => {
                const avatarUrl = e.target.result;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
                const avatarImg = document.getElementById('avatarImg');
                const avatarPlaceholder = document.getElementById('avatarPlaceholder');
                const profileAvatarImg = document.getElementById('profileAvatarImg');
                const profileAvatarPlaceholder = document.getElementById('profileAvatarPlaceholder');

                if (avatarImg) {
                    avatarImg.src = avatarUrl;
                    avatarImg.style.display = 'block';
                    avatarPlaceholder.style.display = 'none';
                }
                if (profileAvatarImg) {
                    profileAvatarImg.src = avatarUrl;
                    profileAvatarImg.style.display = 'block';
                    profileAvatarPlaceholder.style.display = 'none';
                }

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const savedUser = localStorage.getItem('careerFinderCurrentUser');
                if (savedUser) {
                    const user = JSON.parse(savedUser);
                    user.avatar = avatarUrl;
                    localStorage.setItem('careerFinderCurrentUser', JSON.stringify(user));
                }

                showToast('–ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω', 'success');
            };
            reader.readAsDataURL(file);
        }
    }

    // –ß–∞—Ç-–±–æ—Ç
    initChatBot() {
        this.chatMessages = [
            {
                question: "–ø—Ä–∏–≤–µ—Ç",
                answer: "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∫–∞—Ä—å–µ—Ä–µ. –ú–æ–≥—É –ø–æ–º–æ—á—å —Å –ø–æ–∏—Å–∫–æ–º —Ä–∞–±–æ—Ç—ã, —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º —Ä–µ–∑—é–º–µ –∏–ª–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–æ–π –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é."
            },
            {
                question: "—Ä–µ–∑—é–º–µ",
                answer: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—à –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ä–µ–∑—é–º–µ! –û–Ω –ø–æ–º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–µ–∑—é–º–µ –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
            },
            {
                question: "—Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ",
                answer: "–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é —Å –ø–æ–º–æ—â—å—é –Ω–∞—à–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ —Å–æ–≤–µ—Ç–æ–≤ –æ—Ç HR-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤."
            },
            {
                question: "–∑–∞—Ä–ø–ª–∞—Ç–∞",
                answer: "–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∑–∞—Ä–ø–ª–∞—Ç–∞—Ö –≤ —Ä–∞–∑–¥–µ–ª–µ '–ê–Ω–∞–ª–∏–∑ –∑–∞—Ä–ø–ª–∞—Ç'. –ú—ã –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –µ–∂–µ–º–µ—Å—è—á–Ω–æ."
            }
        ];
    }

    handleChatInput(event) {
        if (event.key === 'Enter') {
            this.sendMessage();
        }
    }

    sendMessage() {
        const input = document.getElementById('chatInput');
        const message = input.value.trim();
        
        if (message) {
            this.addChatMessage(message, 'user');
            input.value = '';

            // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞
            setTimeout(() => {
                this.generateBotResponse(message);
            }, 1000);
        }
    }

    addChatMessage(message, sender) {
        const chatBody = document.getElementById('chatBody');
        const messageDiv = document.createElement('div');
        messageDiv.className = `chat-message ${sender}`;
        
        messageDiv.innerHTML = `
            <div class="message-content">${message}</div>
        `;
        
        chatBody.appendChild(messageDiv);
        chatBody.scrollTop = chatBody.scrollHeight;
    }

    generateBotResponse(userMessage) {
        const lowerMessage = userMessage.toLowerCase();
        let response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –≤–æ–ø—Ä–æ—Å. –ú–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å?";

        for (const item of this.chatMessages) {
            if (lowerMessage.includes(item.question)) {
                response = item.answer;
                break;
            }
        }

        this.addChatMessage(response, 'bot');
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑—é–º–µ
    generateResume() {
        const name = document.getElementById('profileName')?.value || '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤';
        const profession = document.getElementById('profileProfession')?.value || 'Frontend Developer';
        
        const resumeName = document.getElementById('resumeName');
        const resumeProfession = document.getElementById('resumeProfession');
        
        if (resumeName) resumeName.textContent = name;
        if (resumeProfession) resumeProfession.textContent = profession;
        
        showToast('–†–µ–∑—é–º–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ!', 'success');
    }

    downloadResume() {
        showToast('–§—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è PDF –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è', 'info');
    }

    // –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å AI
    startAIPractice() {
        showToast('AI-—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞! –ì–æ—Ç–æ–≤—å—Ç–µ—Å—å –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.', 'success');
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å AI API
    }

    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
    resetPassword() {
        const email = document.getElementById('resetEmail').value;
        if (email) {
            showToast(`–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ ${email}`, 'success');
            closeModal('forgotPasswordModal');
        } else {
            showToast('–í–≤–µ–¥–∏—Ç–µ email', 'error');
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function toggleNotifications() {
    const panel = document.getElementById('notificationsPanel');
    panel.classList.toggle('show');
}

function toggleChat() {
    const chat = document.getElementById('chatWidget');
    chat.classList.toggle('open');
}

function searchByCategory(category) {
    careerFeatures.searchByCategory(category);
}

function handleAvatarUpload(input) {
    careerFeatures.handleAvatarUpload(input);
}

function handleChatInput(event) {
    careerFeatures.handleChatInput(event);
}

function sendMessage() {
    careerFeatures.sendMessage();
}

function generateResume() {
    careerFeatures.generateResume();
}

function downloadResume() {
    careerFeatures.downloadResume();
}

function startAIPractice() {
    careerFeatures.startAIPractice();
}

function resetPassword() {
    careerFeatures.resetPassword();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
const careerFeatures = new CareerFeatures();