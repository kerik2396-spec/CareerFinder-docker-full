// CareerFinder - Enhanced Main JavaScript
class CareerFinder {
    constructor() {
        this.currentUser = null;
        this.favorites = new Set();
        this.init();
    }

    init() {
        this.setupEventListeners();
        this.setActiveNavLink();
        this.initSmoothScrolling();
        this.initializeCounters();
        this.checkAuthState();
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const path = window.location.pathname;
        if (path.includes('vacancies.html')) {
            this.loadVacancies();
        } else if (path.includes('companies.html')) {
            this.loadCompanies();
        } else if (path.includes('events.html')) {
            this.loadEvents();
        } else if (path.includes('blog.html')) {
            this.loadBlogPosts();
        } else if (path.includes('index.html') || path === '/') {
            this.loadVacancies();
        }
    }

    setupEventListeners() {
        // Search forms
        const searchForm = document.getElementById('searchForm');
        if (searchForm) {
            searchForm.addEventListener('submit', (e) => this.handleSearch(e));
        }

        const vacancyFilters = document.getElementById('vacancyFilters');
        if (vacancyFilters) {
            vacancyFilters.addEventListener('submit', (e) => this.handleVacancySearch(e));
        }

        // Auth forms
        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', (e) => this.handleLogin(e));
        }

        const registerForm = document.getElementById('registerForm');
        if (registerForm) {
            registerForm.addEventListener('submit', (e) => this.handleRegister(e));
        }

        // Global event listeners
        document.addEventListener('click', (e) => {
            // Favorite buttons
            if (e.target.closest('[data-favorite]')) {
                this.toggleFavorite(e.target.closest('[data-favorite]'));
            }
            
            // Apply buttons
            if (e.target.closest('[data-apply]')) {
                this.handleApplication(e.target.closest('[data-apply]'));
            }
            
            // Load more buttons
            if (e.target.closest('[data-load-more]')) {
                this.loadMoreContent(e.target.closest('[data-load-more]'));
            }
        });

        // Modal handlers
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                this.closeAllModals();
            }
        });

        // Form validation
        document.addEventListener('input', (e) => {
            if (e.target.type === 'email') {
                this.validateEmail(e.target);
            }
            if (e.target.type === 'password') {
                this.validatePassword(e.target);
            }
        });
    }

    setActiveNavLink() {
        const currentPage = window.location.pathname.split('/').pop() || 'index.html';
        const navLinks = document.querySelectorAll('.nav-link');
        
        navLinks.forEach(link => {
            const linkHref = link.getAttribute('href');
            if (linkHref === currentPage) {
                link.classList.add('active');
            } else {
                link.classList.remove('active');
            }
        });
    }

    initSmoothScrolling() {
        const links = document.querySelectorAll('a[href^="#"]');
        
        links.forEach(link => {
            link.addEventListener('click', (e) => {
                const href = link.getAttribute('href');
                if (href === '#') return;
                
                const targetElement = document.querySelector(href);
                if (targetElement) {
                    e.preventDefault();
                    const headerHeight = document.querySelector('header').offsetHeight;
                    const targetPosition = targetElement.offsetTop - headerHeight - 20;
                    
                    window.scrollTo({
                        top: targetPosition,
                        behavior: 'smooth'
                    });
                }
            });
        });
    }

    initializeCounters() {
        const counters = document.querySelectorAll('[data-count]');
        counters.forEach(counter => {
            const target = parseInt(counter.getAttribute('data-count'));
            this.animateCounter(counter, target);
        });
    }

    animateCounter(element, target) {
        let current = 0;
        const increment = target / 100;
        const timer = setInterval(() => {
            current += increment;
            if (current >= target) {
                current = target;
                clearInterval(timer);
            }
            element.textContent = Math.floor(current).toLocaleString() + '+';
        }, 20);
    }

    async loadVacancies() {
        const container = document.getElementById('vacanciesContainer') || document.getElementById('vacanciesList');
        if (!container) return;

        try {
            // Simulate API call
            await new Promise(resolve => setTimeout(resolve, 500));
            const vacancies = this.getSampleVacancies();
            this.renderVacancies(container, vacancies);
        } catch (error) {
            console.error('Error loading vacancies:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞–∫–∞–Ω—Å–∏–π', 'error');
        }
    }

    getSampleVacancies() {
        return [
            {
                id: 1,
                title: 'Frontend Developer',
                company: 'TechCorp',
                location: '–ú–æ—Å–∫–≤–∞',
                type: '–ü–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å',
                salary: '–æ—Ç 150 000 ‚ÇΩ',
                description: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π. –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å React.',
                tags: ['JavaScript', 'React', 'Vue.js'],
                featured: true,
                date: '2024-03-15'
            },
            {
                id: 2,
                title: 'Backend Developer',
                company: 'DataSoft',
                location: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
                type: '–£–¥–∞–ª—ë–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞',
                salary: '–æ—Ç 180 000 ‚ÇΩ',
                description: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —á–∞—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π. –û–ø—ã—Ç —Å Node.js, Python Django.',
                tags: ['Node.js', 'Python', 'PostgreSQL'],
                featured: false,
                date: '2024-03-14'
            },
            {
                id: 3,
                title: 'UX/UI Designer',
                company: 'DesignStudio',
                location: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥',
                type: '–ì–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫',
                salary: '–æ—Ç 120 000 ‚ÇΩ',
                description: '–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –∏ –ø—Ä–æ—Ç–æ—Ç–∏–ø–æ–≤. –†–∞–±–æ—Ç–∞ –≤ Figma, Adobe XD.',
                tags: ['Figma', 'UI/UX', 'Prototyping'],
                featured: false,
                date: '2024-03-13'
            }
        ];
    }

    renderVacancies(container, vacancies) {
        container.innerHTML = vacancies.map(vacancy => `
            <div class="vacancy-card ${vacancy.featured ? 'featured' : ''}">
                <h3>${this.escapeHtml(vacancy.title)}</h3>
                <div class="meta">${this.escapeHtml(vacancy.company)} ‚Ä¢ ${this.escapeHtml(vacancy.location)} ‚Ä¢ ${this.escapeHtml(vacancy.type)}</div>
                <div class="salary">${this.escapeHtml(vacancy.salary)}</div>
                <p>${this.escapeHtml(vacancy.description)}</p>
                <div class="vacancy-tags">
                    ${vacancy.tags.map(tag => `<span class="tag">${this.escapeHtml(tag)}</span>`).join('')}
                </div>
                <div class="vacancy-actions">
                    <button class="btn btn-outline" data-favorite="${vacancy.id}">
                        ${this.favorites.has(vacancy.id) ? '‚ù§Ô∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º' : 'ü§ç –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ'}
                    </button>
                    <button class="btn btn-primary" data-apply="${vacancy.id}">–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è</button>
                </div>
            </div>
        `).join('');
    }

    async handleSearch(e) {
        e.preventDefault();
        const formData = new FormData(e.target);
        const position = formData.get('position') || e.target.querySelector('input[type="text"]').value;
        const location = formData.get('location') || e.target.querySelectorAll('input[type="text"]')[1]?.value;

        if (!position && !location) {
            this.showNotification('–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞', 'warning');
            return;
        }

        const button = e.target.querySelector('button[type="submit"]');
        const originalText = button.textContent;
        
        try {
            button.disabled = true;
            button.classList.add('loading');

            // Simulate API call
            await new Promise(resolve => setTimeout(resolve, 1000));
            
            this.showNotification(`–ü–æ–∏—Å–∫: "${position}" –≤ ${location || '–ª—é–±–æ–º —Ä–µ–≥–∏–æ–Ω–µ'}`, 'info');
            
            // Redirect to vacancies page with search parameters
            const params = new URLSearchParams();
            if (position) params.set('q', position);
            if (location) params.set('location', location);
            
            window.location.href = `vacancies.html?${params.toString()}`;
            
        } catch (error) {
            this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ', 'error');
        } finally {
            button.disabled = false;
            button.classList.remove('loading');
            button.textContent = originalText;
        }
    }

    async handleVacancySearch(e) {
        e.preventDefault();
        const formData = new FormData(e.target);
        const filters = Object.fromEntries(formData.entries());
        
        this.showNotification('–ü—Ä–∏–º–µ–Ω–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞', 'info');
        console.log('Search filters:', filters);
    }

    async handleLogin(e) {
        e.preventDefault();
        const formData = new FormData(e.target);
        const email = formData.get('email');
        const password = formData.get('password');

        if (!this.validateEmail({ value: email }) || !password) {
            this.showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', 'error');
            return;
        }

        const button = e.target.querySelector('button[type="submit"]');
        const originalText = button.textContent;
        
        try {
            button.disabled = true;
            button.classList.add('loading');

            // Simulate API call
            await new Promise(resolve => setTimeout(resolve, 1500));

            // Mock successful login
            this.currentUser = {
                name: '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤',
                email: email,
                profession: 'Frontend Developer'
            };

            localStorage.setItem('currentUser', JSON.stringify(this.currentUser));
            
            this.showNotification('–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!', 'success');
            this.closeModal('loginModal');
            this.updateUserUI();
            
        } catch (error) {
            this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å–∏—Å—Ç–µ–º—É', 'error');
        } finally {
            button.disabled = false;
            button.classList.remove('loading');
            button.textContent = originalText;
        }
    }

    async handleRegister(e) {
        e.preventDefault();
        const formData = new FormData(e.target);
        const name = formData.get('name');
        const email = formData.get('email');
        const password = formData.get('password');
        const profession = formData.get('profession');

        if (!name || !this.validateEmail({ value: email }) || !this.validatePassword({ value: password }) || !profession) {
            this.showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', 'error');
            return;
        }

        const button = e.target.querySelector('button[type="submit"]');
        const originalText = button.textContent;
        
        try {
            button.disabled = true;
            button.classList.add('loading');

            // Simulate API call
            await new Promise(resolve => setTimeout(resolve, 1500));

            // Mock successful registration
            this.currentUser = { name, email, profession };
            localStorage.setItem('currentUser', JSON.stringify(this.currentUser));
            
            this.showNotification('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!', 'success');
            this.closeModal('registerModal');
            this.updateUserUI();
            
        } catch (error) {
            this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', 'error');
        } finally {
            button.disabled = false;
            button.classList.remove('loading');
            button.textContent = originalText;
        }
    }

    validateEmail(input) {
        const email = input.value;
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        const isValid = emailRegex.test(email);
        
        if (input.parentElement) {
            if (email && !isValid) {
                input.parentElement.classList.add('error');
            } else {
                input.parentElement.classList.remove('error');
            }
        }
        
        return isValid;
    }

    validatePassword(input) {
        const password = input.value;
        const isValid = password.length >= 6;
        
        if (input.parentElement) {
            if (password && !isValid) {
                input.parentElement.classList.add('error');
            } else {
                input.parentElement.classList.remove('error');
            }
        }
        
        return isValid;
    }

    toggleFavorite(button) {
        if (!this.currentUser) {
            this.showNotification('–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ', 'warning');
            this.openModal('loginModal');
            return;
        }

        const vacancyId = button.getAttribute('data-favorite');
        const vacancyCard = button.closest('.vacancy-card');
        const vacancyTitle = vacancyCard.querySelector('h3').textContent;
        
        if (this.favorites.has(vacancyId)) {
            this.favorites.delete(vacancyId);
            button.textContent = 'ü§ç –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ';
            button.classList.remove('favorited');
            this.showNotification(`–í–∞–∫–∞–Ω—Å–∏—è "${vacancyTitle}" —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ`, 'info');
        } else {
            this.favorites.add(vacancyId);
            button.textContent = '‚ù§Ô∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º';
            button.classList.add('favorited');
            this.showNotification(`–í–∞–∫–∞–Ω—Å–∏—è "${vacancyTitle}" –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ`, 'success');
        }

        // Save to localStorage
        localStorage.setItem('favorites', JSON.stringify([...this.favorites]));
    }

    handleApplication(button) {
        if (!this.currentUser) {
            this.showNotification('–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É, —á—Ç–æ–±—ã –æ—Ç–∫–ª–∏–∫–∞—Ç—å—Å—è –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏', 'warning');
            this.openModal('loginModal');
            return;
        }

        const vacancyId = button.getAttribute('data-apply');
        const vacancyCard = button.closest('.vacancy-card');
        const vacancyTitle = vacancyCard.querySelector('h3').textContent;

        // Simulate application process
        button.disabled = true;
        button.textContent = '–û—Ç–ø—Ä–∞–≤–∫–∞...';
        button.classList.add('loading');

        setTimeout(() => {
            button.disabled = false;
            button.textContent = '–û—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ‚úì';
            button.classList.remove('loading');
            this.showNotification(`–û—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é "${vacancyTitle}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!`, 'success');
            
            // Reset button after 3 seconds
            setTimeout(() => {
                button.textContent = '–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è';
            }, 3000);
        }, 2000);
    }

    loadMoreContent(button) {
        button.disabled = true;
        button.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞...';
        button.classList.add('loading');

        // Simulate loading more content
        setTimeout(() => {
            this.showNotification('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω', 'info');
            button.disabled = false;
            button.textContent = '–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ';
            button.classList.remove('loading');
        }, 1500);
    }

    checkAuthState() {
        const savedUser = localStorage.getItem('currentUser');
        const savedFavorites = localStorage.getItem('favorites');
        
        if (savedUser) {
            this.currentUser = JSON.parse(savedUser);
            this.updateUserUI();
        }
        
        if (savedFavorites) {
            this.favorites = new Set(JSON.parse(savedFavorites));
        }
    }

    updateUserUI() {
        const authButtons = document.querySelector('.auth-buttons');
        if (!authButtons || !this.currentUser) return;

        authButtons.innerHTML = `
            <div class="user-menu">
                <button class="user-avatar">${this.getUserInitials(this.currentUser.name)}</button>
                <div class="user-dropdown">
                    <a href="profile.html">–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å</a>
                    <a href="resumes.html">–ú–æ–∏ —Ä–µ–∑—é–º–µ</a>
                    <a href="favorites.html">–ò–∑–±—Ä–∞–Ω–Ω–æ–µ</a>
                    <a href="settings.html">–ù–∞—Å—Ç—Ä–æ–π–∫–∏</a>
                    <hr>
                    <a href="#" onclick="careerFinder.logout()">–í—ã–π—Ç–∏</a>
                </div>
            </div>
        `;
    }

    getUserInitials(name) {
        return name.split(' ').map(n => n[0]).join('').toUpperCase();
    }

    logout() {
        this.currentUser = null;
        this.favorites.clear();
        localStorage.removeItem('currentUser');
        localStorage.removeItem('favorites');
        
        this.showNotification('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã', 'info');
        setTimeout(() => {
            window.location.reload();
        }, 1000);
    }

    showNotification(message, type = 'info') {
        // Remove existing notification
        const existingNotification = document.querySelector('.notification');
        if (existingNotification) {
            existingNotification.remove();
        }

        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.setAttribute('role', 'alert');
        notification.setAttribute('aria-live', 'polite');
        notification.innerHTML = `
            <span>${this.escapeHtml(message)}</span>
            <button onclick="this.parentElement.remove()" aria-label="–ó–∞–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ">√ó</button>
        `;

        document.body.appendChild(notification);

        // Auto remove after 5 seconds
        setTimeout(() => {
            if (notification.parentElement) {
                notification.remove();
            }
        }, 5000);
    }

    escapeHtml(unsafe) {
        if (!unsafe) return '';
        return unsafe
            .toString()
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
    }

    // Modal functions
    openModal(modalId) {
        const modal = document.getElementById(modalId);
        const overlay = document.getElementById('overlay');
        
        if (modal && overlay) {
            modal.style.display = 'block';
            overlay.style.display = 'block';
            document.body.style.overflow = 'hidden';
            
            // Focus first input in modal
            const firstInput = modal.querySelector('input');
            if (firstInput) {
                setTimeout(() => firstInput.focus(), 100);
            }
        }
    }

    closeModal(modalId) {
        const modal = document.getElementById(modalId);
        const overlay = document.getElementById('overlay');
        
        if (modal && overlay) {
            modal.style.display = 'none';
            overlay.style.display = 'none';
            document.body.style.overflow = '';
        }
    }

    closeAllModals() {
        const modals = document.querySelectorAll('.modal');
        const overlay = document.getElementById('overlay');
        
        modals.forEach(modal => modal.style.display = 'none');
        if (overlay) {
            overlay.style.display = 'none';
        }
        document.body.style.overflow = '';
    }

    async loadCompanies() {
        const container = document.getElementById('companiesContainer');
        if (!container) return;

        try {
            await new Promise(resolve => setTimeout(resolve, 500));
            const companies = this.getSampleCompanies();
            this.renderCompanies(container, companies);
        } catch (error) {
            console.error('Error loading companies:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–∞–Ω–∏–π', 'error');
        }
    }

    getSampleCompanies() {
        return [
            {
                id: 1,
                name: 'TechCorp',
                industry: 'IT',
                employees: '1000+',
                location: '–ú–æ—Å–∫–≤–∞',
                description: '–í–µ–¥—É—â–∞—è IT-–∫–æ–º–ø–∞–Ω–∏—è, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∞—è—Å—è –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π',
                logo: 'üöÄ',
                vacancies: 54,
                rating: 4.8
            },
            {
                id: 2,
                name: 'FinBank',
                industry: '–§–∏–Ω–∞–Ω—Å—ã',
                employees: '5000+',
                location: '–†–æ—Å—Å–∏—è',
                description: '–ö—Ä—É–ø–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∏–Ω—Å—Ç–∏—Ç—É—Ç —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –ø–æ–¥—Ö–æ–¥–æ–º –∫ –±–∞–Ω–∫–æ–≤—Å–∫–∏–º —É—Å–ª—É–≥–∞–º',
                logo: 'üè¶',
                vacancies: 32,
                rating: 4.5
            },
            {
                id: 3,
                name: 'MarketPlus',
                industry: '–†–∏—Ç–µ–π–ª',
                employees: '2500+',
                location: '–ú–æ—Å–∫–≤–∞',
                description: '–°–µ—Ç—å —Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç–æ–≤ –ø—Ä–µ–º–∏—É–º-–∫–ª–∞—Å—Å–∞ —Å —Ä–∞–∑–≤–∏—Ç–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π',
                logo: 'üõçÔ∏è',
                vacancies: 28,
                rating: 4.3
            }
        ];
    }

    renderCompanies(container, companies) {
        container.innerHTML = companies.map(company => `
            <div class="company-card">
                <div class="company-logo">${this.escapeHtml(company.logo)}</div>
                <h3>${this.escapeHtml(company.name)}</h3>
                <div class="company-meta">${this.escapeHtml(company.industry)} ‚Ä¢ ${this.escapeHtml(company.employees)} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ ‚Ä¢ ${this.escapeHtml(company.location)}</div>
                <p>${this.escapeHtml(company.description)}</p>
                <div class="company-stats">
                    <div class="stat">
                        <strong>${company.vacancies}</strong>
                        <span>–í–∞–∫–∞–Ω—Å–∏–∏</span>
                    </div>
                    <div class="stat">
                        <strong>${company.rating}</strong>
                        <span>–†–µ–π—Ç–∏–Ω–≥</span>
                    </div>
                </div>
                <button class="btn btn-primary" style="width: 100%; margin-top: var(--space-4);" onclick="careerFinder.viewCompany(${company.id})">–°–º–æ—Ç—Ä–µ—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏</button>
            </div>
        `).join('');
    }

    async loadEvents() {
        const container = document.getElementById('eventsContainer');
        if (!container) return;

        try {
            await new Promise(resolve => setTimeout(resolve, 500));
            const events = this.getSampleEvents();
            this.renderEvents(container, events);
            
            this.initEventFilters();
        } catch (error) {
            console.error('Error loading events:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π', 'error');
        }
    }

    getSampleEvents() {
        return [
            {
                id: 1,
                title: 'IT Career Day 2024',
                date: '2024-03-15',
                type: 'offline',
                category: 'conference',
                location: '–¢–µ—Ö–Ω–æ–ø–∞—Ä–∫ ‚Ä¢ –ú–æ—Å–∫–≤–∞',
                description: '–ö—Ä—É–ø–Ω–µ–π—à–∞—è IT-—è—Ä–º–∞—Ä–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π —Å —É—á–∞—Å—Ç–∏–µ–º –≤–µ–¥—É—â–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π.'
            },
            {
                id: 2,
                title: 'Digital Marketing Conference',
                date: '2024-03-22',
                type: 'online',
                category: 'conference',
                location: '–û–Ω–ª–∞–π–Ω',
                description: '–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è –¥–ª—è –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–æ–≤ –∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –ø–æ digital.'
            }
        ];
    }

    renderEvents(container, events) {
        container.innerHTML = events.map(event => {
            const eventDate = new Date(event.date);
            const day = eventDate.getDate();
            const month = eventDate.toLocaleString('ru', { month: 'short' });
            
            return `
                <div class="event-card" data-type="${event.type}" data-category="${event.category}">
                    <div class="event-date">
                        <span class="day">${day}</span>
                        <span class="month">${month}</span>
                    </div>
                    <h3>${this.escapeHtml(event.title)}</h3>
                    <div class="event-meta">
                        <span>${this.escapeHtml(event.location)}</span>
                        <span class="event-type">${event.type === 'online' ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ–ª–∞–π–Ω'}</span>
                    </div>
                    <p>${this.escapeHtml(event.description)}</p>
                    <div class="event-actions">
                        <button class="btn btn-outline">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</button>
                        <button class="btn btn-primary">–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</button>
                    </div>
                </div>
            `;
        }).join('');
    }

    initEventFilters() {
        const filterTabs = document.querySelectorAll('.filter-tab');
        
        filterTabs.forEach(tab => {
            tab.addEventListener('click', () => {
                filterTabs.forEach(t => t.classList.remove('active'));
                tab.classList.add('active');
                
                const filter = tab.getAttribute('data-filter');
                this.filterEvents(filter);
            });
        });
    }

    filterEvents(filter) {
        const events = document.querySelectorAll('.event-card');
        
        events.forEach(event => {
            if (filter === 'all') {
                event.style.display = 'block';
            } else {
                const eventType = event.getAttribute('data-type');
                const eventCategory = event.getAttribute('data-category');
                
                if (eventType === filter || eventCategory === filter) {
                    event.style.display = 'block';
                } else {
                    event.style.display = 'none';
                }
            }
        });
    }

    async loadBlogPosts() {
        const container = document.getElementById('blogContainer');
        if (!container) return;

        try {
            await new Promise(resolve => setTimeout(resolve, 500));
            const posts = this.getSampleBlogPosts();
            this.renderBlogPosts(container, posts);
        } catch (error) {
            console.error('Error loading blog posts:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–µ–π', 'error');
        }
    }

    getSampleBlogPosts() {
        return [
            {
                id: 1,
                title: '–ö–∞–∫ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∑—é–º–µ, –∫–æ—Ç–æ—Ä–æ–µ –∑–∞–º–µ—Ç—è—Ç',
                category: '–ö–∞—Ä—å–µ—Ä–∞',
                excerpt: '–°–æ–≤–µ—Ç—ã –æ—Ç HR-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∑—é–º–µ.',
                author: '–ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞',
                readTime: '5 –º–∏–Ω —á—Ç–µ–Ω–∏—è',
                image: 'üìä'
            },
            {
                id: 2,
                title: '–¢—Ä–µ–Ω–¥—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –Ω–∞ 2024 –≥–æ–¥',
                category: 'IT',
                excerpt: '–û–±–∑–æ—Ä –Ω–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ –ø–æ–¥—Ö–æ–¥–æ–≤ –≤ IT-–∏–Ω–¥—É—Å—Ç—Ä–∏–∏.',
                author: '–ü–µ—Ç—Ä –°–∏–¥–æ—Ä–æ–≤',
                readTime: '7 –º–∏–Ω —á—Ç–µ–Ω–∏—è',
                image: 'üíª'
            }
        ];
    }

    renderBlogPosts(container, posts) {
        container.innerHTML = posts.map(post => `
            <div class="blog-card">
                <div class="blog-image">${this.escapeHtml(post.image)}</div>
                <div class="blog-content">
                    <span class="blog-category">${this.escapeHtml(post.category)}</span>
                    <h3>${this.escapeHtml(post.title)}</h3>
                    <p class="blog-excerpt">${this.escapeHtml(post.excerpt)}</p>
                    <div class="blog-meta">
                        <div class="blog-author">
                            <div class="author-avatar">${this.getUserInitials(post.author)}</div>
                            <span>${this.escapeHtml(post.author)}</span>
                        </div>
                        <span>${this.escapeHtml(post.readTime)}</span>
                    </div>
                </div>
            </div>
        `).join('');
    }

    viewCompany(companyId) {
        this.showNotification(`–ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–∞–∫–∞–Ω—Å–∏—è–º –∫–æ–º–ø–∞–Ω–∏–∏ #${companyId}`, 'info');
    }
}

// Initialize the application
document.addEventListener('DOMContentLoaded', () => {
    window.careerFinder = new CareerFinder();
});

// Global functions for HTML onclick attributes
function openModal(modalId) {
    if (window.careerFinder) {
        window.careerFinder.openModal(modalId);
    }
}

function closeModal(modalId) {
    if (window.careerFinder) {
        window.careerFinder.closeModal(modalId);
    }
}

function closeAllModals() {
    if (window.careerFinder) {
        window.careerFinder.closeAllModals();
    }
}
// API –±–∞–∑–æ–≤—ã–π URL
const API_BASE_URL = 'http://localhost:5000/api';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
async function apiRequest(endpoint, options = {}) {
  const token = localStorage.getItem('token');
  const config = {
    headers: {
      'Content-Type': 'application/json',
      ...(token && { Authorization: `Bearer ${token}` }),
    },
    ...options,
  };

  if (options.body) {
    config.body = JSON.stringify(options.body);
  }

  const response = await fetch(`${API_BASE_URL}${endpoint}`, config);
  const data = await response.json();

  if (!response.ok) {
    throw new Error(data.message || '–û—à–∏–±–∫–∞ API');
  }

  return data;
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é handleLogin
async function handleLogin(e) {
  e.preventDefault();
  const formData = new FormData(e.target);
  const email = formData.get('email');
  const password = formData.get('password');

  try {
    const data = await apiRequest('/auth/login', {
      method: 'POST',
      body: { email, password },
    });

    localStorage.setItem('token', data.token);
    localStorage.setItem('currentUser', JSON.stringify(data.user));
    
    this.currentUser = data.user;
    this.showNotification('–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!', 'success');
    this.closeModal('loginModal');
    this.updateUserUI();
  } catch (error) {
    this.showNotification(error.message, 'error');
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π —Å API
async function loadVacancies() {
  const container = document.getElementById('vacanciesContainer');
  if (!container) return;

  try {
    const data = await apiRequest('/vacancies');
    this.renderVacancies(container, data.vacancies);
  } catch (error) {
    console.error('Error loading vacancies:', error);
    this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞–∫–∞–Ω—Å–∏–π', 'error');
  }
}
// CareerFinder - Enhanced Main JavaScript with API Integration
class CareerFinder {
    constructor() {
        this.currentUser = null;
        this.favorites = new Set();
        this.API_BASE_URL = 'http://localhost:5000/api'; // –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à URL –±—ç–∫–µ–Ω–¥–∞
        this.init();
    }

    init() {
        this.setupEventListeners();
        this.setActiveNavLink();
        this.initSmoothScrolling();
        this.initializeCounters();
        this.checkAuthState();
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        this.loadPageSpecificData();
    }

    setupEventListeners() {
        // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ...

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è API —Ñ–æ—Ä–º
        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', (e) => this.handleLogin(e));
        }

        const registerForm = document.getElementById('registerForm');
        if (registerForm) {
            registerForm.addEventListener('submit', (e) => this.handleRegister(e));
        }

        const searchForm = document.getElementById('searchForm');
        if (searchForm) {
            searchForm.addEventListener('submit', (e) => this.handleSearch(e));
        }
    }

    // API –º–µ—Ç–æ–¥—ã
    async apiCall(endpoint, options = {}) {
        const url = `${this.API_BASE_URL}${endpoint}`;
        const config = {
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            },
            ...options
        };

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        if (this.currentUser && this.currentUser.token) {
            config.headers.Authorization = `Bearer ${this.currentUser.token}`;
        }

        try {
            const response = await fetch(url, config);
            const data = await response.json();

            if (!response.ok) {
                throw new Error(data.message || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
            }

            return data;
        } catch (error) {
            console.error('API Error:', error);
            throw error;
        }
    }

    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    async handleLogin(e) {
        e.preventDefault();
        const formData = new FormData(e.target);
        const email = formData.get('email');
        const password = formData.get('password');

        const button = e.target.querySelector('button[type="submit"]');
        const originalText = button.textContent;

        try {
            button.disabled = true;
            button.classList.add('loading');

            const data = await this.apiCall('/auth/login', {
                method: 'POST',
                body: JSON.stringify({ email, password })
            });

            this.currentUser = {
                ...data.data.user,
                token: data.data.token
            };

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
            localStorage.setItem('currentUser', JSON.stringify(this.currentUser));
            
            this.showNotification('–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!', 'success');
            this.closeModal('loginModal');
            this.updateUserUI();
            
        } catch (error) {
            this.showNotification(error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å–∏—Å—Ç–µ–º—É', 'error');
        } finally {
            button.disabled = false;
            button.classList.remove('loading');
            button.textContent = originalText;
        }
    }

    async handleRegister(e) {
        e.preventDefault();
        const formData = new FormData(e.target);
        const userData = {
            email: formData.get('email'),
            password: formData.get('password'),
            profile: {
                firstName: formData.get('firstName'),
                lastName: formData.get('lastName')
            },
            type: 'candidate' // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–∞–∫ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è
        };

        const button = e.target.querySelector('button[type="submit"]');
        const originalText = button.textContent;

        try {
            button.disabled = true;
            button.classList.add('loading');

            const data = await this.apiCall('/auth/register', {
                method: 'POST',
                body: JSON.stringify(userData)
            });

            this.currentUser = {
                ...data.data.user,
                token: data.data.token
            };

            localStorage.setItem('currentUser', JSON.stringify(this.currentUser));
            
            this.showNotification('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!', 'success');
            this.closeModal('registerModal');
            this.updateUserUI();
            
        } catch (error) {
            this.showNotification(error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', 'error');
        } finally {
            button.disabled = false;
            button.classList.remove('loading');
            button.textContent = originalText;
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π
    async loadVacancies() {
        const container = document.getElementById('vacanciesContainer') || 
                         document.getElementById('vacanciesList');
        if (!container) return;

        try {
            const data = await this.apiCall('/vacancies');
            this.renderVacancies(container, data.data.vacancies);
        } catch (error) {
            console.error('Error loading vacancies:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞–∫–∞–Ω—Å–∏–π', 'error');
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π
    async loadCompanies() {
        const container = document.getElementById('companiesContainer');
        if (!container) return;

        try {
            const data = await this.apiCall('/companies');
            this.renderCompanies(container, data.data.companies);
        } catch (error) {
            console.error('Error loading companies:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–∞–Ω–∏–π', 'error');
        }
    }

    // –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π
    async handleSearch(e) {
        e.preventDefault();
        const formData = new FormData(e.target);
        const searchParams = new URLSearchParams();

        if (formData.get('position')) searchParams.append('search', formData.get('position'));
        if (formData.get('location')) searchParams.append('location', formData.get('location'));

        try {
            const data = await this.apiCall(`/vacancies?${searchParams.toString()}`);
            
            if (window.location.pathname.includes('vacancies.html')) {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤–∞–∫–∞–Ω—Å–∏–π
                const container = document.getElementById('vacanciesList');
                if (container) {
                    this.renderVacancies(container, data.data.vacancies);
                }
            } else {
                // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–∞–∫–∞–Ω—Å–∏–π —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
                window.location.href = `vacancies.html?${searchParams.toString()}`;
            }
        } catch (error) {
            this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤–∞–∫–∞–Ω—Å–∏–π', 'error');
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    loadPageSpecificData() {
        const path = window.location.pathname;
        
        if (path.includes('vacancies.html')) {
            this.loadVacancies();
        } else if (path.includes('companies.html')) {
            this.loadCompanies();
        } else if (path.includes('index.html') || path === '/') {
            this.loadVacancies();
        }
    }

    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
    // ... (–æ—Å—Ç–∞–≤—à–∏–µ—Å—è –º–µ—Ç–æ–¥—ã –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏)
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    window.careerFinder = new CareerFinder();
});