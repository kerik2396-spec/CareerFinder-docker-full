// services.js - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —É—Å–ª—É–≥–∞–º–∏
class ServicesManager {
    constructor() {
        this.services = {
            highlightVacancy: { 
                id: 'highlight',
                name: '–í—ã–¥–µ–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏',
                price: 500, 
                duration: 7,
                description: '–í–∞—à–∞ –≤–∞–∫–∞–Ω—Å–∏—è –±—É–¥–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∞ —Ü–≤–µ—Ç–æ–º –≤ –ø–æ–∏—Å–∫–µ',
                icon: 'üîç'
            },
            urgentTag: { 
                id: 'urgent',
                name: '–°—Ä–æ—á–Ω—ã–π —Ç—ç–≥ "Urgent"',
                price: 300, 
                duration: 3,
                description: '–ü–æ–º–µ—Ç–∫–∞ "–°—Ä–æ—á–Ω–æ" –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –Ω–∞–π–º–∞',
                icon: '‚ö°'
            },
            topPlacement: { 
                id: 'top',
                name: '–¢–æ–ø-—Ä–∞–∑–º–µ—â–µ–Ω–∏–µ',
                price: 1500, 
                duration: 7,
                description: '–†–∞–∑–º–µ—â–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ —Ç–æ–ø–µ –ø–æ–∏—Å–∫–æ–≤–æ–π –≤—ã–¥–∞—á–∏',
                icon: '‚≠ê'
            },
            candidateDatabase: { 
                id: 'database',
                name: '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ',
                price: 5000, 
                duration: 30,
                description: '–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–π –±–∞–∑–µ —Ä–µ–∑—é–º–µ',
                icon: 'üìä'
            },
            vacancyAnalytics: {
                id: 'analytics',
                name: '–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞',
                price: 800,
                duration: 30,
                description: '–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏',
                icon: 'üìà'
            },
            candidateTesting: {
                id: 'testing',
                name: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
                price: 2000,
                duration: 30,
                description: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤',
                icon: 'üéØ'
            }
        };
        
        this.selectedServices = new Set();
        this.init();
    }

    init() {
        this.loadSelectedServices();
        this.setupEventListeners();
    }

    setupEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–≤–∞–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        document.addEventListener('click', (e) => {
            if (e.target.closest('[data-service]')) {
                const serviceId = e.target.closest('[data-service]').getAttribute('data-service');
                this.toggleService(serviceId);
            }
        });
    }

    toggleService(serviceId) {
        if (!this.services[serviceId]) {
            console.error('Service not found:', serviceId);
            return;
        }

        if (this.selectedServices.has(serviceId)) {
            this.selectedServices.delete(serviceId);
            this.showNotification(`–£—Å–ª—É–≥–∞ "${this.services[serviceId].name}" —É–¥–∞–ª–µ–Ω–∞`, 'info');
        } else {
            this.selectedServices.add(serviceId);
            this.showNotification(`–£—Å–ª—É–≥–∞ "${this.services[serviceId].name}" –¥–æ–±–∞–≤–ª–µ–Ω–∞`, 'success');
        }

        this.saveSelectedServices();
        this.updateServiceUI();
    }

    addServiceToCart(serviceId) {
        if (!this.services[serviceId]) {
            console.error('Service not found:', serviceId);
            return false;
        }

        this.selectedServices.add(serviceId);
        this.saveSelectedServices();
        this.updateServiceUI();
        
        return true;
    }

    removeServiceFromCart(serviceId) {
        this.selectedServices.delete(serviceId);
        this.saveSelectedServices();
        this.updateServiceUI();
    }

    getSelectedServices() {
        return Array.from(this.selectedServices).map(serviceId => this.services[serviceId]);
    }

    calculateTotal() {
        return Array.from(this.selectedServices).reduce((total, serviceId) => {
            return total + this.services[serviceId].price;
        }, 0);
    }

    getServicePrice(serviceId) {
        return this.services[serviceId]?.price || 0;
    }

    getAllServices() {
        return Object.values(this.services);
    }

    getServicesByCategory(category) {
        // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —É—Å–ª—É–≥ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
        return this.getAllServices();
    }

    createServiceInvoice() {
        const selected = this.getSelectedServices();
        const total = this.calculateTotal();
        
        return {
            services: selected,
            subtotal: total,
            tax: Math.round(total * 0.2), // 20% –ù–î–°
            total: total + Math.round(total * 0.2),
            invoiceNumber: `INV-${Date.now()}`,
            date: new Date().toISOString().split('T')[0]
        };
    }

    saveSelectedServices() {
        localStorage.setItem('selectedServices', JSON.stringify(Array.from(this.selectedServices)));
    }

    loadSelectedServices() {
        const saved = localStorage.getItem('selectedServices');
        if (saved) {
            this.selectedServices = new Set(JSON.parse(saved));
        }
    }

    updateServiceUI() {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –∫–æ—Ä–∑–∏–Ω—ã –∏ —Å—á–µ—Ç—á–∏–∫–∞
        const cartCounter = document.getElementById('servicesCartCounter');
        if (cartCounter) {
            cartCounter.textContent = this.selectedServices.size;
            cartCounter.style.display = this.selectedServices.size > 0 ? 'flex' : 'none';
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        const totalElement = document.getElementById('servicesTotal');
        if (totalElement) {
            totalElement.textContent = this.calculateTotal().toLocaleString() + ' ‚ÇΩ';
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —É—Å–ª—É–≥
        this.getAllServices().forEach(service => {
            const button = document.querySelector(`[data-service="${service.id}"]`);
            if (button) {
                const isSelected = this.selectedServices.has(service.id);
                button.textContent = isSelected ? '‚úì –í –∫–æ—Ä–∑–∏–Ω–µ' : `–î–æ–±–∞–≤–∏—Ç—å –∑–∞ ${service.price} ‚ÇΩ`;
                button.className = isSelected ? 
                    'btn btn-success btn-sm' : 
                    'btn btn-outline btn-sm';
            }
        });
    }

    clearCart() {
        this.selectedServices.clear();
        this.saveSelectedServices();
        this.updateServiceUI();
        this.showNotification('–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞', 'info');
    }

    processPayment(paymentMethod) {
        const invoice = this.createServiceInvoice();
        
        if (invoice.services.length === 0) {
            this.showNotification('–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —É—Å–ª—É–≥—É', 'warning');
            return false;
        }

        // –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø–ª–∞—Ç—ã
        this.showNotification('–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞...', 'info');
        
        return new Promise((resolve) => {
            setTimeout(() => {
                // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
                const success = Math.random() > 0.1; // 90% —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
                
                if (success) {
                    this.showNotification('–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!', 'success');
                    this.clearCart();
                    resolve(true);
                } else {
                    this.showNotification('–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', 'error');
                    resolve(false);
                }
            }, 2000);
        });
    }

    showNotification(message, type = 'info') {
        if (window.careerFinder) {
            window.careerFinder.showNotification(message, type);
        } else {
            alert(message);
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', function() {
    window.servicesManager = new ServicesManager();
});

// API –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.ServicesManager = ServicesManager;